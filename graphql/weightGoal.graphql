type WeightGoal {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user_id: Int!
    goal_start_date: Date!
    # goal_end_date will be derived from  comparing other start dates
    # if there is a goal with a later start date
    # then that will be more current and can be used to calculate the end of this goal
    goal_in_lbs: Int!
    note: String
    active: Boolean!
    # if inactive, this will effectively turn off the tracker
    # and treat the user as if they are in a kind of maintenance mode
}

input WeightGoalInput {
    goal_start_date: Date!
    goal_in_lbs: Int!
    note: String
    active: Boolean!
}

input DateRange {
    from: Date!
    to: Date!
}

extend type Query {
    weight_goals: [WeightGoal!]!
        @guard
        @whereAuth(relation: "user")
        @all
        @orderBy(column: "goal_start_date", direction: DESC)

    weightGoalsBetweenDates(
        goal_start_date: DateRange! @whereBetween
    ): [WeightGoal!]!
        @guard
        @whereAuth(relation: "user")
        @all
        @orderBy(column: "goal_start_date", direction: DESC)

    currentWeightGoal: WeightGoal
        @guard
        @whereAuth(relation: "user")
        @orderBy(column: "goal_start_date", direction: DESC)
        @first
}

extend type Mutation {
    setWeightGoal(input: WeightGoalInput! @spread): WeightGoal!
        @guard
        @inject(context: "user.id", name: "user_id")
        @create

    updateWeightGoal(id: ID!, input: WeightGoalInput!): WeightGoal!
        @guard
        @inject(context: "user.id", name: "input.user_id")

    deleteWeightGoal(id: ID!): Boolean!
        @guard
        @inject(context: "user.id", name: "user_id")
}
