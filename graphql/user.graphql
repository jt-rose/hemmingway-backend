scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

enum GENDER {
    MALE
    FEMALE
    NB
}

type User {
    id: ID!
    name: String!
    email: String!
    gender: GENDER!
    birthday: Date!
    height_in_inches: Int!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    exercises: [Exercise!]! @hasMany
    meals: [Meal!]! @hasMany
    moods: [Mood!]! @hasMany
    sleep_habits: [SleepHabit!]! @hasMany(relation: "sleepHabits")
    user_weights: [UserWeight!]! @hasMany(relation: "userWeights")
    pop_goals: [PopGoal!]! @hasMany(relation: "popGoals")
    weight_goals: [WeightGoal!]! @hasMany(relation: "weightGoals")
    daily_steps_goals: [DailyStepsGoal!]! @hasMany(relation: "dailyStepsGoals")
    daily_distance_goals: [DailyDistanceGoal!]!
        @hasMany(relation: "dailyDistanceGoals")
}

extend type Query {
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

extend type Mutation {
    createUser(
        name: String! @rules(apply: ["unique:users"])
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @rules(apply: ["min:8"]) @hash
        gender: GENDER!
        birthday: Date!
        height_in_inches: Int!
    ): User! @create

    updateUser(
        id: ID!
        name: String
        email: String
        gender: GENDER!
        birthday: Date!
        height_in_inches: Int!
    ): User! @guard @inject(context: "user.id", name: "user_id") @update

    deleteUser(id: ID!): User
        @guard
        @inject(context: "user.id", name: "user_id")
        @delete
}
