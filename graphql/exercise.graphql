"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

# Exercise types will be hard-coded options on the frontend
# but I will avoid turning these into enums for now

type Exercise {
    id: ID!
    name: String!
    date_of_exercise: Date!
    minutes: Int!
    calories: Int!
    steps: Int # nullable
    distance_in_miles: Int # nullable
    created_at: DateTime!
    updated_at: DateTime!
    user_id: Int!
    user: User! @belongsTo
}

extend type Query {
    # exercise(id: ID! @eq): Exercise @guard @find
    exercises: [Exercise!]!
        @guard
        @whereAuth(relation: "user")
        @paginate(defaultCount: 10)

    exercisesByDate(date_of_exercise: Date! @where): [Exercise!]!
        @guard
        @whereAuth(relation: "user")
        @all
}

input ExerciseInput {
    name: String!
    date_of_exercise: Date!
    minutes: Int!
    calories: Int!
}

extend type Mutation {
    createExercise(input: ExerciseInput! @spread): Exercise
        @guard
        @inject(context: "user.id", name: "user_id")
        @create

    updateExercise(id: ID!, input: ExerciseInput!): Exercise
        @guard
        @inject(context: "user.id", name: "input.user_id")

    deleteExercise(id: ID!): Boolean!
        @guard
        @inject(context: "user.id", name: "user_id")
}
