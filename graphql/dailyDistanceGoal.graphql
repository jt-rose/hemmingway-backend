type DailyDistanceGoal {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user_id: Int!
    goal_start_date: Date!
    # goal_end_date will be derived from  comparing other start dates
    # if there is a goal with a later start date
    # then that will be more current and can be used to calculate the end of this goal
    daily_goal_in_miles: Int!
    note: String
    active: Boolean!
}

input DailyDistanceGoalInput {
    goal_start_date: Date!
    daily_goal_in_miles: Int!
    note: String
    active: Boolean!
}

input DateRange {
    from: Date!
    to: Date!
}

extend type Query {
    daily_distance_goals: [DailyDistanceGoal!]!
        @guard
        @whereAuth(relation: "user")
        @all
        @orderBy(column: "goal_start_date", direction: DESC)

    distanceGoalsBetweenDates(
        goal_start_date: DateRange! @whereBetween
    ): [DailyDistanceGoal!]!
        @guard
        @whereAuth(relation: "user")
        @all
        @orderBy(column: "goal_start_date", direction: DESC)

    currentDistanceGoal: DailyDistanceGoal
        @guard
        @whereAuth(relation: "user")
        @orderBy(column: "goal_start_date", direction: DESC)
        @first
}

extend type Mutation {
    setDailyDistanceGoal(
        input: DailyDistanceGoalInput! @spread
    ): DailyDistanceGoal!
        @guard
        @inject(context: "user.id", name: "user_id")
        @create

    updateDailyDistanceGoal(
        id: ID!
        input: DailyDistanceGoalInput!
    ): DailyDistanceGoal!
        @guard
        @inject(context: "user.id", name: "input.user_id")

    deleteDailyDistanceGoal(id: ID!): Boolean!
        @guard
        @inject(context: "user.id", name: "user_id")
}
